Turn-based capture the flag game for University of Helsinki AI Challenge course

Usage
=====

$ cabal configure
$ cabal build
$ ./dist/build/ctf/ctf config "(cat input_a.txt; cat >/dev/null)" "(cat input_b.txt; cat >/dev/null)"

$ (cd brains; javac Thing RandomWalk)
$ ./dist/build/ctf/ctf config "(cd brains; java RandomWalk)" "(cd brains; java RandomWalk)"

Example input_[ab].txt included.

Brain->Engine communication format
==================================

This is what your brain should output on stdout:

<soldiername> <movementdirection> [<grenadecoord>]
<soldiername> <movementdirection> [<grenadecoord>]
...

movementdirection: either U, L, D, R (the 4 directions) or S (stay still)
grenadecoord: optional and should be of the form (<x>,<y>)

Engine->Brain format
====================

This is what your brain gets from the engine on stdin.

AT THE START OF THE GAME:

<yourteam>
<map>
<emptyline>

yourteam: "A" or "B"
map: m lines of n characters representing an mxn tile map.

NB! The coordinate system of the map is as follows:
  - (0,0) is the first character on the first line
  - y increases along one line and
  - x increases with every line change.
    
The meanings of the tiles are:
  . -- empty
  # -- obstacle
  A,B -- spawn of team A, spawn of team B
  a,b -- base (flag) of team A, base of team B


FOR EACH ROUND:

<yourpoints> <enemypoints>
Flag <x> <y>
Soldier <name> <x> <y> <cooldown> <alive> <flag>
Soldier <name> <x> <y> <cooldown> <alive> <flag>
Soldier <name> <x> <y> <cooldown> <alive> <flag>
Grenade <x> <y> <countdown>
EnemyFlag <x> <y>
Enemy <name> <x> <y> <alive> <flag>
Enemy <name> <x> <y> <alive> <flag>
Enemy <name> <x> <y> <alive> <flag>
<an empty line signals the end>

x, y, cooldown, countdown: integers
name: matched by the regex [A-Za-z]+
alive: either "True" or "False"
flag: either "No", "A", or "B"

The entries are always in this order. There number of Soldier, Enemy
and Grenade records can vary, but there will always be exactly one
Flag and exactly one EnemyFlag record.

Config format
=============

The first line should contain a Rules struct in Haskell format.

The rest of the lines should describe the game map, one character per
tile, rows ended by newlines. All lines should be of equal length. The
meanings of the characters are:

'.' - empty
'#' - obstacle
'A' - spawn of team A
'B' - spawn of team B
'a' - flag of team A
'b' - flag of team B

See the provided file "config" for an example.

Engine output
=============

The stdout of the engine contains a log of game events. The last line
on stdout is either the score in the format "Final score: A 0 - B 101"
or "<teamname> failed" if a brain terminates prematurely.

The stderr of the engine contains the stderrs of the two brains, each
line labeled by the team of the brain that produced it.

TODO
====

- timeouts for reading commands?



